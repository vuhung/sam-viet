//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50401.0
// 
namespace WorldMap.PredictionService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="refCountryIndicator", Namespace="http://schemas.datacontract.org/2004/07/NCRVisual.web.Services")]
    public partial class refCountryIndicator : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int country_idField;
        
        private float country_indicator_valueField;
        
        private int country_indicator_yearField;
        
        private int indicator_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int country_id {
            get {
                return this.country_idField;
            }
            set {
                if ((this.country_idField.Equals(value) != true)) {
                    this.country_idField = value;
                    this.RaisePropertyChanged("country_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float country_indicator_value {
            get {
                return this.country_indicator_valueField;
            }
            set {
                if ((this.country_indicator_valueField.Equals(value) != true)) {
                    this.country_indicator_valueField = value;
                    this.RaisePropertyChanged("country_indicator_value");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int country_indicator_year {
            get {
                return this.country_indicator_yearField;
            }
            set {
                if ((this.country_indicator_yearField.Equals(value) != true)) {
                    this.country_indicator_yearField = value;
                    this.RaisePropertyChanged("country_indicator_year");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int indicator_id {
            get {
                return this.indicator_idField;
            }
            set {
                if ((this.indicator_idField.Equals(value) != true)) {
                    this.indicator_idField = value;
                    this.RaisePropertyChanged("indicator_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PredictionService.IPredictionService")]
    public interface IPredictionService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPredictionService/PredictDataNextYears", ReplyAction="http://tempuri.org/IPredictionService/PredictDataNextYearsResponse")]
        System.IAsyncResult BeginPredictDataNextYears(System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData, int yearsToPredict, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> EndPredictDataNextYears(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPredictionServiceChannel : WorldMap.PredictionService.IPredictionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PredictDataNextYearsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PredictDataNextYearsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PredictionServiceClient : System.ServiceModel.ClientBase<WorldMap.PredictionService.IPredictionService>, WorldMap.PredictionService.IPredictionService {
        
        private BeginOperationDelegate onBeginPredictDataNextYearsDelegate;
        
        private EndOperationDelegate onEndPredictDataNextYearsDelegate;
        
        private System.Threading.SendOrPostCallback onPredictDataNextYearsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PredictionServiceClient() {
        }
        
        public PredictionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PredictionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PredictionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PredictionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<PredictDataNextYearsCompletedEventArgs> PredictDataNextYearsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult WorldMap.PredictionService.IPredictionService.BeginPredictDataNextYears(System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData, int yearsToPredict, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPredictDataNextYears(presentData, yearsToPredict, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> WorldMap.PredictionService.IPredictionService.EndPredictDataNextYears(System.IAsyncResult result) {
            return base.Channel.EndPredictDataNextYears(result);
        }
        
        private System.IAsyncResult OnBeginPredictDataNextYears(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData = ((System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator>)(inValues[0]));
            int yearsToPredict = ((int)(inValues[1]));
            return ((WorldMap.PredictionService.IPredictionService)(this)).BeginPredictDataNextYears(presentData, yearsToPredict, callback, asyncState);
        }
        
        private object[] OnEndPredictDataNextYears(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> retVal = ((WorldMap.PredictionService.IPredictionService)(this)).EndPredictDataNextYears(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPredictDataNextYearsCompleted(object state) {
            if ((this.PredictDataNextYearsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PredictDataNextYearsCompleted(this, new PredictDataNextYearsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PredictDataNextYearsAsync(System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData, int yearsToPredict) {
            this.PredictDataNextYearsAsync(presentData, yearsToPredict, null);
        }
        
        public void PredictDataNextYearsAsync(System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData, int yearsToPredict, object userState) {
            if ((this.onBeginPredictDataNextYearsDelegate == null)) {
                this.onBeginPredictDataNextYearsDelegate = new BeginOperationDelegate(this.OnBeginPredictDataNextYears);
            }
            if ((this.onEndPredictDataNextYearsDelegate == null)) {
                this.onEndPredictDataNextYearsDelegate = new EndOperationDelegate(this.OnEndPredictDataNextYears);
            }
            if ((this.onPredictDataNextYearsCompletedDelegate == null)) {
                this.onPredictDataNextYearsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPredictDataNextYearsCompleted);
            }
            base.InvokeAsync(this.onBeginPredictDataNextYearsDelegate, new object[] {
                        presentData,
                        yearsToPredict}, this.onEndPredictDataNextYearsDelegate, this.onPredictDataNextYearsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override WorldMap.PredictionService.IPredictionService CreateChannel() {
            return new PredictionServiceClientChannel(this);
        }
        
        private class PredictionServiceClientChannel : ChannelBase<WorldMap.PredictionService.IPredictionService>, WorldMap.PredictionService.IPredictionService {
            
            public PredictionServiceClientChannel(System.ServiceModel.ClientBase<WorldMap.PredictionService.IPredictionService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginPredictDataNextYears(System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> presentData, int yearsToPredict, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = presentData;
                _args[1] = yearsToPredict;
                System.IAsyncResult _result = base.BeginInvoke("PredictDataNextYears", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> EndPredictDataNextYears(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator> _result = ((System.Collections.ObjectModel.ObservableCollection<WorldMap.PredictionService.refCountryIndicator>)(base.EndInvoke("PredictDataNextYears", _args, result)));
                return _result;
            }
        }
    }
}
